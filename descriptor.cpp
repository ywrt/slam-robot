#include "octave.h"
#include "descriptor.h"

namespace {

Pos compare_list[] = {
  Pos(-2,-2),
  Pos(-5,-4),
  Pos(-3,-5),
  Pos(-6,-1),
  Pos(0,-2),
  Pos(-2,-7),
  Pos(-7,-4),
  Pos(0,0),
  Pos(-6,-3),
  Pos(-3,-5),
  Pos(0,-7),
  Pos(-4,-7),
  Pos(-7,0),
  Pos(-1,-5),
  Pos(-3,-1),
  Pos(-1,-7),
  Pos(-6,-7),
  Pos(-2,-2),
  Pos(-5,-6),
  Pos(-6,-1),
  Pos(-5,-2),
  Pos(-1,-7),
  Pos(-6,-1),
  Pos(-5,-7),
  Pos(-4,-4),
  Pos(-6,-3),
  Pos(-5,-7),
  Pos(-3,-7),
  Pos(-4,-7),
  Pos(-3,-2),
  Pos(0,-1),
  Pos(0,-3),
  Pos(-1,-4),
  Pos(-3,-5),
  Pos(-4,-2),
  Pos(-2,0),
  Pos(-4,-3),
  Pos(-1,-7),
  Pos(0,-1),
  Pos(-4,-1),
  Pos(-7,-3),
  Pos(-5,-3),
  Pos(-5,-5),
  Pos(-7,-2),
  Pos(-4,-5),
  Pos(0,-1),
  Pos(-3,-6),
  Pos(-1,0),
  Pos(-4,0),
  Pos(-7,-4),
  Pos(-7,-6),
  Pos(-2,-6),
  Pos(-3,-6),
  Pos(0,0),
  Pos(-1,-1),
  Pos(-7,-5),
  Pos(-1,-4),
  Pos(-2,-2),
  Pos(-2,-7),
  Pos(-5,-7),
  Pos(-3,-2),
  Pos(-4,-1),
  Pos(-6,-6),
  Pos(-4,-2),
  Pos(-3,-6),
  Pos(-1,-1),
  Pos(-5,-6),
  Pos(-1,-6),
  Pos(-3,-6),
  Pos(-6,-4),
  Pos(0,-6),
  Pos(-3,-6),
  Pos(-4,-5),
  Pos(-7,-5),
  Pos(-4,-6),
  Pos(-4,-2),
  Pos(-1,-4),
  Pos(-2,-3),
  Pos(-1,-5),
  Pos(-2,-1),
  Pos(-1,0),
  Pos(-5,-2),
  Pos(-6,0),
  Pos(-6,-4),
  Pos(-7,-2),
  Pos(0,-4),
  Pos(-1,-7),
  Pos(-6,-4),
  Pos(-5,-2),
  Pos(-1,0),
  Pos(-1,-6),
  Pos(-1,-4),
  Pos(-2,-1),
  Pos(-3,-7),
  Pos(-2,-6),
  Pos(-3,-4),
  Pos(-6,-3),
  Pos(-4,-2),
  Pos(-3,-5),
  Pos(-2,-7),
  Pos(0,-5),
  Pos(0,-5),
  Pos(-4,-1),
  Pos(0,-2),
  Pos(-5,-5),
  Pos(-5,-2),
  Pos(-6,-2),
  Pos(-6,0),
  Pos(0,-7),
  Pos(-2,-2),
  Pos(-3,-1),
  Pos(-1,-4),
  Pos(-7,-7),
  Pos(0,-3),
  Pos(-5,-1),
  Pos(-7,-6),
  Pos(-1,0),
  Pos(-4,-6),
  Pos(-6,-7),
  Pos(0,-3),
  Pos(-4,-7),
  Pos(-4,-7),
  Pos(-3,-6),
  Pos(-1,-3),
  Pos(-3,-3),
  Pos(-5,-7),
  Pos(-3,0),
  Pos(-3,-2),
};

}

// Create a 128 measurement descriptor. Assumes image
// has already been smoothed.
Descriptor::Descriptor(const Octave& o, const Pos& pos) {
  // Take 8x16 == 128 random samples, concatentating the results.
  Pos* ptr = compare_list;
  for (int word = 0; word < 8; ++word) {
    uint32_t accum = 0;
    for (int i = 0; i < 16; ++i) {
      accum <<= 2;
      int delta = (int)o.pixel(pos + ptr[0]) - (int)o.pixel(pos + ptr[1]);
      ptr += 2;
      if (delta < -3)
        accum |= 2;
      else if (delta > 3)
        accum |= 1;
    }
    data[word] = accum;
  }

}
